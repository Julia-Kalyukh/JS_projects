/* Задания на урок:
1) Реализовать функционал, что после заполнения формы и нажатия кнопки "Подтвердить" - 
новый фильм добавляется в список. Страница не должна перезагружаться.
Новый фильм должен добавляться в movieDB.movies.
Для получения доступа к значению input - обращаемся к нему как input.value;
P.S. Здесь есть несколько вариантов решения задачи, принимается любой, но рабочий.
    // (действия 1-15)

2) Если название фильма больше, чем 21 символ - обрезать его и добавить три точки
    // (действия 16-17)

3) При клике на мусорную корзину - элемент будет удаляться из списка (сложно)
    // (действия 18-20)

4) Если в форме стоит галочка "Сделать любимым" - в консоль вывести сообщение:
    "Добавляем любимый фильм"
    // (действие 22)

5) Фильмы должны быть отсортированы по алфавиту
    // (действие 21)*/

'use strict';

// У жизненного цикла HTML-страницы есть три важных события:
// 1) DOMContentLoaded – браузер полностью загрузил HTML, было построено DOM-дерево, но внешние ресурсы,
// такие как картинки <img> и стили, могут быть ещё не загружены.
// 2) load – браузер загрузил HTML и внешние ресурсы (картинки, стили и т.д.).
// 3) beforeunload/unload – пользователь покидает страницу.

// Каждое из этих событий может быть полезно:
// - Событие DOMContentLoaded – DOM готов, так что обработчик может искать DOM-узлы и инициализировать интерфейс.
// - Событие load – внешние ресурсы были загружены, стили применены, размеры картинок известны и т.д.
// - Событие beforeunload – пользователь покидает страницу. Мы можем проверить, сохранил ли он изменения и спросить,
//     на самом ли деле он хочет уйти.
// - unload – пользователь почти ушёл, но мы всё ещё можем запустить некоторые операции, например, отправить статистику.

document.addEventListener('DOMContentLoaded', () => { //построение DOM-дерева
//window.addEventListener('DOMContentLoaded'); //еще вариант построения DOM-дерева
    
    const movieDB = {
        movies: [
            "Логан",
            "Лига справедливости",
            "Ла-ла лэнд",
            "Одержимость",
            "Скотт Пилигрим против...",
        ]
    };
    
    const   adv = document.querySelectorAll('.promo__adv img'),
            poster = document.querySelector('.promo__bg'),
            genre = poster.querySelector('.promo__genre'),
            movieList = document.querySelector('.promo__interactive-list'),

// 1 - получаем элементы, с которыми будем работать
            addForm = document.querySelector('form.add'),
            addInput = addForm.querySelector('.adding__input'),
            checkbox = addForm.querySelector('[type="checkbox"]'); //поиск чекбокса через атрибут
 
// 2 - назначаем обработчик событий
    addForm.addEventListener('submit', (event) => {
    // 3 - отменяем действие браузера (перезагрузку страницы)
         event.preventDefault();
 
    // 4 - получаем значение инпута, с которым взаимодействовал пользователь
        let newFilm = addInput.value; //фильм
        const favorite = checkbox.checked; //булиновое значение чекбокса

    // 15 - условие, чтобы в массив не добавлялась пустая строка
        if (newFilm){

            // 16 - условие для задачи №2
                if(newFilm.length > 21) {
                    // 17 - заменяем старую строку на новый вариант
                    newFilm = `${newFilm.substring(0,22)}...`;
                }

            // 22 - условие для задачи №4
                if(favorite) {
                    console.log("Добавляем любимый фильм");
                }

            // 5 - помещаем фильм, который ввел пользователь, в базу данных
                movieDB.movies.push(newFilm); //метод, добавляет фильм в массив
            
            // 6 - сортируем фильм
                //movieDB.movies.sort();
            // 12 - сортируем фильм с помощью функции сортировки
                sortArr(movieDB.movies);

            // 13 - создание нового элемента списка фильмов
                createMovieList(movieDB.movies, movieList);
        }
    
    // 14 - очистка формы
        //addForm.reset(); - 1 вариант
        event.target.reset(); // 2 вариант
    });
    

// 9 - создаем ф-цию удаления рекламы
    //Function Expression (Функциональное Выражение) - вызываются после того, как были созданы
    //+ со стрелочной функцией
    const deleteAdv = (arr) => {
        arr.forEach(item =>{
            item.remove();
        });
    };

// 10 - группируем в функцию изменения вида страницы
    const makeChanges = () => { // без аргументов
        genre.textContent = 'драма';
        poster.style.backgroundImage = 'url("img/bg.jpg")';
    };

// 11 - ф-ция сортировки массива
    const sortArr = (arr) => {
        arr.sort();
    };
    
// 7 - создание функции добавления нового элемента в список на странице
// + делаем универсальные аргументы функции: 
    // films - фильмы (movieDB.movies)
    // parent - родительский блок, который использует все эти фильмы (movieList)

    function createMovieList(films, parent) {
        parent.innerHTML = "";
        // 21 - помещаем сортировку в функцию, чтобы фильмы сортировались при добавлении, удалении и отрисовке
        sortArr(films);
    
        films.forEach((film, i) => {
            parent.innerHTML += `
            <li class="promo__interactive-item">${i + 1} ${film}
                <div class="delete"></div>
            </li>
          `;
        });

        /*  18 - после того, как список фильмов и корзинки сформированы, вешаем обработчик событий
            пользователь кликает на корзинку - удаляется ее родитель
            + вырезаем фильм из базы данных */

        // если хотим навесить на разные эл-ты одно и то же событие, то используем forEach
        // в аргументах кнопка и номер по-порядку
        document.querySelectorAll('.delete').forEach((btn, i) => {
            // 19 - обращаемся к каждой корзинке и навешиваем обработчик клика
                btn.addEventListener('click', () => {
                    btn.parentElement.remove(); //обращаемся к родительскому элементу и удаляем его
                    movieDB.movies.splice(i, 1);// метод, который вырезает определенный элемент из массива:
                                                // 1 аргумент - номер элемента;
                                                // 2 аргумент - сколько элементов нужно удалить;

            // 20 - используем рекурсию для сортировки номеров элементов при удалении
                createMovieList(films, parent); //используем универсальные аргументы
                });
        });
    }

// 8 - вызываем функцию добавления нового элемента в список на странице 
    //используя аргументы
    createMovieList(movieDB.movies, movieList);
    deleteAdv(adv);
    makeChanges(); // без аргументов
});